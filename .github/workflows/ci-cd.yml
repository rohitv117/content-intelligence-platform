name: Content Intelligence Platform CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.11'
  DBT_VERSION: '1.7.3'
  POSTGRES_VERSION: '15'

jobs:
  lint-and-test:
    name: Lint and Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dbt.txt
        pip install black isort flake8 bandit safety pytest
        
    - name: Run black (code formatting)
      run: |
        black --check --diff app/ dbt/ scripts/
        
    - name: Run isort (import sorting)
      run: |
        isort --check-only --diff app/ dbt/ scripts/
        
    - name: Run flake8 (linting)
      run: |
        flake8 app/ dbt/ scripts/ --max-line-length=100 --ignore=E203,W503
        
    - name: Run bandit (security checks)
      run: |
        bandit -r app/ dbt/ scripts/ -f json -o bandit-report.json || true
        
    - name: Run safety (dependency security)
      run: |
        safety check --json --output safety-report.json || true
        
    - name: Run unit tests
      run: |
        pytest app/tests/ -v --cov=app --cov-report=xml --cov-report=html
        
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results
        path: |
          coverage.xml
          htmlcov/
          bandit-report.json
          safety-report.json

  dbt-build-and-test:
    name: dbt Build and Test
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:${{ env.POSTGRES_VERSION }}
        env:
          POSTGRES_DB: content_intelligence_test
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_pass
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dbt
      run: |
        python -m pip install --upgrade pip
        pip install dbt-postgres==${{ env.DBT_VERSION }}
        pip install great-expectations
        
    - name: Wait for PostgreSQL
      run: |
        while ! pg_isready -h localhost -p 5432 -U test_user; do
          sleep 1
        done
        
    - name: Create dbt profiles
      run: |
        mkdir -p ~/.dbt
        cat > ~/.dbt/profiles.yml << EOF
        content_intelligence:
          target: test
          outputs:
            test:
              type: postgres
              host: localhost
              user: test_user
              password: test_pass
              port: 5432
              dbname: content_intelligence_test
              schema: dbt_test
              threads: 4
        EOF
        
    - name: Run dbt deps
      run: |
        cd dbt
        dbt deps
        
    - name: Run dbt seed
      run: |
        cd dbt
        dbt seed
        
    - name: Run dbt build
      run: |
        cd dbt
        dbt build
        
    - name: Run dbt test
      run: |
        cd dbt
        dbt test
        
    - name: Run dbt docs generate
      run: |
        cd dbt
        dbt docs generate
        
    - name: Upload dbt artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dbt-artifacts
        path: |
          dbt/target/
          dbt/logs/

  great-expectations:
    name: Great Expectations Data Quality
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:${{ env.POSTGRES_VERSION }}
        env:
          POSTGRES_DB: content_intelligence_test
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_pass
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install great-expectations psycopg2-binary
        
    - name: Wait for PostgreSQL
      run: |
        while ! pg_isready -h localhost -p 5432 -U test_user; do
          sleep 1
        done
        
    - name: Initialize Great Expectations
      run: |
        cd great_expectations
        great_expectations init --no-prompt
        
    - name: Run Great Expectations checkpoints
      run: |
        cd great_expectations
        great_expectations checkpoint run
        
    - name: Upload GE artifacts
      uses: actions/upload-artifact@v3
      with:
        name: great-expectations-artifacts
        path: great_expectations/uncommitted/

  docker-build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [lint-and-test, dbt-build-and-test, great-expectations]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build FastAPI image
      run: |
        docker build -f Dockerfile.fastapi -t content-intel-fastapi:latest .
        
    - name: Build dbt image
      run: |
        docker build -f Dockerfile.dbt -t content-intel-dbt:latest .
        
    - name: Test Docker images
      run: |
        docker run --rm content-intel-fastapi:latest python -c "import app; print('FastAPI image test passed')"
        docker run --rm content-intel-dbt:latest python -c "import dbt; print('dbt image test passed')"

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [docker-build]
    
    services:
      postgres:
        image: postgres:${{ env.POSTGRES_VERSION }}
        env:
          POSTGRES_DB: content_intelligence_test
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_pass
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-asyncio httpx
        
    - name: Wait for PostgreSQL
      run: |
        while ! pg_isready -h localhost -p 5432 -U test_user; do
          sleep 1
        done
        
    - name: Run integration tests
      run: |
        pytest app/tests/integration/ -v --tb=short
        
    - name: Upload integration test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: integration-test-results
        path: |
          app/tests/integration/results/

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  deploy-docs:
    name: Deploy Documentation
    runs-on: ubuntu-latest
    needs: [dbt-build-and-test]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./dbt/target
        destination_dir: docs
        
    - name: Deploy API docs
      run: |
        echo "API documentation would be deployed here in production"
        # This would typically deploy to a documentation hosting service

  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [lint-and-test, dbt-build-and-test, great-expectations, docker-build, integration-test, security-scan]
    if: always()
    
    steps:
    - name: Check job status
      run: |
        if [[ "${{ needs.lint-and-test.result }}" == "success" && 
              "${{ needs.dbt-build-and-test.result }}" == "success" && 
              "${{ needs.great-expectations.result }}" == "success" && 
              "${{ needs.docker-build.result }}" == "success" && 
              "${{ needs.integration-test.result }}" == "success" ]]; then
          echo "All jobs succeeded! üéâ"
          exit 0
        else
          echo "Some jobs failed! ‚ùå"
          exit 1
        fi 
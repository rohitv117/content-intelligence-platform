version: '3.8'

services:
  postgres:
    image: postgres:15
    container_name: content_intel_postgres
    environment:
      POSTGRES_DB: content_intelligence
      POSTGRES_USER: content_user
      POSTGRES_PASSWORD: content_pass123
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U content_user -d content_intelligence"]
      interval: 10s
      timeout: 5s
      retries: 5

  fastapi:
    build:
      context: .
      dockerfile: Dockerfile.fastapi
    container_name: content_intel_fastapi
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://content_user:content_pass123@postgres:5432/content_intelligence
      - SECRET_KEY=your-secret-key-change-in-production
      - ALGORITHM=HS256
      - ACCESS_TOKEN_EXPIRE_MINUTES=30
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./app:/app
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3

  dbt:
    build:
      context: .
      dockerfile: Dockerfile.dbt
    container_name: content_intel_dbt
    environment:
      - DBT_PROFILES_DIR=/dbt
      - POSTGRES_HOST=postgres
      - POSTGRES_USER=content_user
      - POSTGRES_PASSWORD=content_pass123
      - POSTGRES_DB=content_intelligence
      - POSTGRES_PORT=5432
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./dbt:/dbt
      - ./seeds:/dbt/seeds
      - ./logs:/dbt/logs
      - ./data:/dbt/data
    working_dir: /dbt

  dbt-docs:
    image: nginx:alpine
    container_name: content_intel_dbt_docs
    ports:
      - "8080:80"
    volumes:
      - ./dbt/target:/usr/share/nginx/html
      - ./nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - dbt

  duckdb:
    image: duckdb/duckdb:latest
    container_name: content_intel_duckdb
    ports:
      - "8081:8081"
    volumes:
      - ./data:/data
      - ./duckdb:/duckdb
    command: ["duckdb", "--http", "--listen", "0.0.0.0", "--port", "8081"]

  prometheus:
    image: prom/prometheus:latest
    container_name: content_intel_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  grafana:
    image: grafana/grafana:latest
    container_name: content_intel_grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus

volumes:
  postgres_data:
  prometheus_data:
  grafana_data: 